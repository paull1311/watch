Index: IStoreApp/Topic_1_HW.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_1_HW.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_1_HW.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,160 @@
+Index: .gitignore
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- .gitignore	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ .gitignore	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
+@@ -0,0 +1,4 @@
++# Created by .ignore support plugin (hsz.mobi)
++.idea
++*.iml
++target
+\ No newline at end of file
+Index: pom.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- pom.xml	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ pom.xml	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
+@@ -0,0 +1,45 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project xmlns="http://maven.apache.org/POM/4.0.0"
++         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
++    <modelVersion>4.0.0</modelVersion>
++
++    <groupId>bionic.edu</groupId>
++    <artifactId>istore</artifactId>
++    <version>1.0-SNAPSHOT</version>
++
++    <packaging>jar</packaging>
++    <name>iStore WebApplication</name>
++
++    <properties>
++        <java.version>1.8</java.version>
++        <!-- Extendedcore library -->
++        <guava.version>22.0</guava.version>
++    </properties>
++
++    <build>
++        <finalName>mac-shop</finalName>
++        <defaultGoal>package</defaultGoal>
++        <plugins>
++            <plugin>
++                <groupId>org.apache.maven.plugins</groupId>
++                <artifactId>maven-compiler-plugin</artifactId>
++                <version>3.1</version>
++                <configuration>
++                    <source>${java.version}</source>
++                    <target>${java.version}</target>
++                </configuration>
++            </plugin>
++        </plugins>
++    </build>
++
++    <dependencies>
++        <dependency>
++            <groupId>com.google.guava</groupId>
++            <artifactId>guava</artifactId>
++            <version>${guava.version}</version>
++        </dependency>
++    </dependencies>
++
++
++</project>
+\ No newline at end of file
+Index: src/main/java/edu/bionic/IStoreApplication.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/IStoreApplication.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ src/main/java/edu/bionic/IStoreApplication.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
+@@ -0,0 +1,39 @@
++package edu.bionic;
++
++import com.google.common.collect.ImmutableList;
++
++import java.util.List;
++import java.util.stream.Collectors;
++
++public class IStoreApplication {
++
++    private static List<Product> products;
++
++    public static void main(String[] args) {
++        initProducts();
++
++        List<Product> sortedProducts = getSortedProducts();
++        printProducts(sortedProducts);
++    }
++
++    private static void initProducts() {
++        products = ImmutableList.of(
++                new Product(1, "iPhone 7", 700),
++                new Product(2, "iPhone 7 Plus", 800),
++                new Product(3, "MacBook Pro", 1500)
++        );
++    }
++
++    private static List<Product> getSortedProducts() {
++        return products
++                .stream()
++                .sorted((product1, product2) -> Double.compare(product2.getPrice(), product1.getPrice()))
++                .collect(Collectors.toList());
++    }
++
++    private static void printProducts(List<Product> products) {
++        products.forEach(product -> {
++            System.out.println(String.format("Product: %s, price - %.2f USD", product.getName(), product.getPrice()));
++        });
++    }
++}
+Index: src/main/java/edu/bionic/Product.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/Product.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ src/main/java/edu/bionic/Product.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
+@@ -0,0 +1,38 @@
++package edu.bionic;
++
++public class Product {
++
++    private Integer id;
++    private String name;
++    private double price;
++
++    public Product(Integer id, String name, double price) {
++        this.id = id;
++        this.name = name;
++        this.price = price;
++    }
++
++    public Integer getId() {
++        return id;
++    }
++
++    public void setId(Integer id) {
++        this.id = id;
++    }
++
++    public String getName() {
++        return name;
++    }
++
++    public void setName(String name) {
++        this.name = name;
++    }
++
++    public double getPrice() {
++        return price;
++    }
++
++    public void setPrice(double price) {
++        this.price = price;
++    }
++}
Index: IStoreApp/Topic_2.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_2.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_2.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,878 @@
+Index: pom.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- pom.xml	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ pom.xml	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -13,12 +13,13 @@
+ 
+     <properties>
+         <java.version>1.8</java.version>
+-        <!-- Extendedcore library -->
+         <guava.version>22.0</guava.version>
++
++        <spring.version>4.3.9.RELEASE</spring.version>
+     </properties>
+ 
+     <build>
+-        <finalName>mac-shop</finalName>
++        <finalName>iStore</finalName>
+         <defaultGoal>package</defaultGoal>
+         <plugins>
+             <plugin>
+@@ -34,11 +35,25 @@
+     </build>
+ 
+     <dependencies>
++        <!-- Extended core library -->
+         <dependency>
+             <groupId>com.google.guava</groupId>
+             <artifactId>guava</artifactId>
+             <version>${guava.version}</version>
+         </dependency>
++
++        <!-- JSR-330 Inject API -->
++        <dependency>
++            <groupId>javax.inject</groupId>
++            <artifactId>javax.inject</artifactId>
++            <version>1</version>
++        </dependency>
++        <!-- Spring IoC -->
++        <dependency>
++            <groupId>org.springframework</groupId>
++            <artifactId>spring-context-support</artifactId>
++            <version>${spring.version}</version>
++        </dependency>
+     </dependencies>
+ 
+ 
+Index: src/main/java/edu/bionic/ConsoleApplication.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/ConsoleApplication.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/ConsoleApplication.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -0,0 +1,76 @@
++package edu.bionic;
++
++import edu.bionic.presentation.console.OrderConsoleController;
++import edu.bionic.presentation.console.ProductConsoleController;
++import org.springframework.context.ApplicationContext;
++import org.springframework.context.support.ClassPathXmlApplicationContext;
++
++import java.io.BufferedReader;
++import java.io.IOException;
++import java.io.InputStreamReader;
++
++public class ConsoleApplication {
++
++    private static BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in));
++
++    private static ProductConsoleController productController;
++    private static OrderConsoleController orderConsoleController;
++
++    public static void main(String[] args) throws IOException {
++        ApplicationContext context =
++                new ClassPathXmlApplicationContext(new String[]{"spring/spring-app.xml"});
++
++        productController = context.getBean("productConsoleController", ProductConsoleController.class);
++        orderConsoleController = context.getBean("orderConsoleController", OrderConsoleController.class);
++
++        startPage();
++    }
++
++    private static void startPage() throws IOException {
++        System.out.println("Добро пожаловать в iStore");
++        System.out.println();
++        System.out.println("Выберите действие:");
++        System.out.println("1. Купить товары");
++        System.out.println("2. Просмотреть заказы");
++        System.out.println("0. Выйти из приложения");
++        switch (consoleReader.readLine()) {
++            case "1":
++                System.out.println("---------------------------------------");
++                byuProducts();
++                break;
++            case "2":
++                System.out.println("---------------------------------------");
++                printOrders();
++                break;
++            case "0":
++                System.exit(0);
++            default:
++                startPage();
++        }
++
++    }
++
++    private static void byuProducts() throws IOException {
++        orderConsoleController.printProductsInBasket();
++        System.out.println("Выберите товар из списка");
++        productController.printAllProducts();
++        System.out.println();
++        System.out.println("0. Завершить заказ");
++
++        int enteredNumber = Integer.parseInt(consoleReader.readLine());
++        if (enteredNumber == 0) {
++            orderConsoleController.saveOrder();
++            startPage();
++        } else {
++            orderConsoleController.addProductToBasket(enteredNumber);
++        }
++        System.out.println("--------------------------------------");
++        byuProducts();
++    }
++
++    private static void printOrders() throws IOException {
++        orderConsoleController.printPreviousOrders();
++        System.out.println("--------------------------------------");
++        startPage();
++    }
++}
+Index: src/main/java/edu/bionic/IStoreApplication.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/IStoreApplication.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ src/main/java/edu/bionic/IStoreApplication.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -1,39 +1,40 @@
+ package edu.bionic;
+ 
+ import com.google.common.collect.ImmutableList;
++import edu.bionic.domain.Product;
+ 
+ import java.util.List;
+ import java.util.stream.Collectors;
+ 
+ public class IStoreApplication {
+ 
+-    private static List<Product> products;
+-
+-    public static void main(String[] args) {
+-        initProducts();
+-
+-        List<Product> sortedProducts = getSortedProducts();
+-        printProducts(sortedProducts);
+-    }
+-
+-    private static void initProducts() {
+-        products = ImmutableList.of(
+-                new Product(1, "iPhone 7", 700),
+-                new Product(2, "iPhone 7 Plus", 800),
+-                new Product(3, "MacBook Pro", 1500)
+-        );
+-    }
+-
+-    private static List<Product> getSortedProducts() {
+-        return products
+-                .stream()
+-                .sorted((product1, product2) -> Double.compare(product2.getPrice(), product1.getPrice()))
+-                .collect(Collectors.toList());
+-    }
+-
+-    private static void printProducts(List<Product> products) {
+-        products.forEach(product -> {
+-            System.out.println(String.format("Product: %s, price - %.2f USD", product.getName(), product.getPrice()));
+-        });
+-    }
++//    private static List<Product> products;
++//
++//    public static void main(String[] args) {
++//        initProducts();
++//
++//        List<Product> sortedProducts = getSortedProducts();
++//        printProducts(sortedProducts);
++//    }
++//
++//    private static void initProducts() {
++//        products = ImmutableList.of(
++//                new Product(1, "iPhone 7", 700),
++//                new Product(2, "iPhone 7 Plus", 800),
++//                new Product(3, "MacBook Pro", 1500)
++//        );
++//    }
++//
++//    private static List<Product> getSortedProducts() {
++//        return products
++//                .stream()
++//                .sorted((product1, product2) -> Double.compare(product2.getPrice(), product1.getPrice()))
++//                .collect(Collectors.toList());
++//    }
++//
++//    private static void printProducts(List<Product> products) {
++//        products.forEach(product -> {
++//            System.out.println(String.format("Product: %s, price - %.2f USD", product.getName(), product.getPrice()));
++//        });
++//    }
+ }
+Index: src/main/java/edu/bionic/dao/OrderDao.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/dao/OrderDao.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/dao/OrderDao.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,12 @@
++package edu.bionic.dao;
++
++import edu.bionic.domain.Order;
++
++import java.util.List;
++
++public interface OrderDao {
++
++    List<Order> getAll();
++
++    void save(Order order);
++}
+Index: src/main/java/edu/bionic/dao/ProductDao.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/dao/ProductDao.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/dao/ProductDao.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,13 @@
++package edu.bionic.dao;
++
++import edu.bionic.domain.Product;
++
++import java.util.List;
++import java.util.Optional;
++
++public interface ProductDao {
++
++    List<Product> getAll();
++
++    Optional<Product> getById(int productId);
++}
+Index: src/main/java/edu/bionic/dao/mock/OrderDaoMock.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/dao/mock/OrderDaoMock.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/dao/mock/OrderDaoMock.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,26 @@
++package edu.bionic.dao.mock;
++
++import edu.bionic.dao.OrderDao;
++import edu.bionic.domain.Order;
++
++import java.util.ArrayList;
++import java.util.List;
++
++public class OrderDaoMock implements OrderDao {
++
++    private List<Order> orderStorage;
++
++    @Override
++    public List<Order> getAll() {
++        return new ArrayList<>(orderStorage);
++    }
++
++    @Override
++    public void save(Order order) {
++        orderStorage.add(order);
++    }
++
++    public void initOrderStorage() {
++        orderStorage = new ArrayList<>();
++    }
++}
+Index: src/main/java/edu/bionic/dao/mock/ProductDaoMock.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/dao/mock/ProductDaoMock.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/dao/mock/ProductDaoMock.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,80 @@
++package edu.bionic.dao.mock;
++
++import edu.bionic.dao.ProductDao;
++import edu.bionic.domain.Color;
++import edu.bionic.domain.Product;
++
++import java.math.BigDecimal;
++import java.util.ArrayList;
++import java.util.List;
++import java.util.Optional;
++
++public class ProductDaoMock implements ProductDao {
++
++    private List<Product> productStorage;
++
++
++    @Override
++    public List<Product> getAll() {
++        return new ArrayList<>(productStorage);
++    }
++
++    @Override
++    public Optional<Product> getById(int productId) {
++        return productStorage.stream().filter(product -> product.getId() == productId).findAny();
++    }
++
++    public void initProductStorage() {
++        productStorage = new ArrayList<>();
++
++        productStorage.add(new Product(
++                1,
++                "iPhone 7",
++                BigDecimal.valueOf(700),
++                Color.BLACK,
++                64,
++                "4,7 inch"
++        ));
++        productStorage.add(new Product(
++                2,
++                "iPhone 7",
++                BigDecimal.valueOf(700),
++                Color.WHITE,
++                128,
++                "4,7 inch"
++        ));
++        productStorage.add(new Product(
++                3,
++                "iPhone 7",
++                BigDecimal.valueOf(700),
++                Color.GRAY,
++                256,
++                "4,7 inch"
++        ));
++        productStorage.add(new Product(
++                4,
++                "iPhone 7 Plus",
++                BigDecimal.valueOf(800),
++                Color.BLACK,
++                256,
++                "5,5 inch"
++        ));
++        productStorage.add(new Product(
++                5,
++                "iPhone 7 Plus",
++                BigDecimal.valueOf(800),
++                Color.GRAY,
++                64,
++                "5,5 inch"
++        ));
++        productStorage.add(new Product(
++                6,
++                "iPhone 7 Plus",
++                BigDecimal.valueOf(800),
++                Color.WHITE,
++                128,
++                "5,5 inch"
++        ));
++    }
++
++}
+Index: src/main/java/edu/bionic/domain/Color.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/domain/Color.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/domain/Color.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,7 @@
++package edu.bionic.domain;
++
++public enum Color {
++    BLACK,
++    WHITE,
++    GRAY
++}
+Index: src/main/java/edu/bionic/domain/Order.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/domain/Order.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/domain/Order.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,49 @@
++package edu.bionic.domain;
++
++import com.google.common.collect.ImmutableList;
++import com.google.common.collect.Lists;
++
++import java.math.BigDecimal;
++import java.time.LocalDateTime;
++import java.util.ArrayList;
++import java.util.List;
++
++public class Order {
++    private LocalDateTime dateTime;
++    private BigDecimal totalAmount;
++    private List<Product> products;
++
++    public Order(LocalDateTime dateTime, BigDecimal totalAmount, List<Product> products) {
++        this.dateTime = dateTime;
++        this.totalAmount = totalAmount;
++        this.products = new ArrayList<>(products);
++    }
++
++    public LocalDateTime getDateTime() {
++        return dateTime;
++    }
++
++    public void setDateTime(LocalDateTime dateTime) {
++        this.dateTime = dateTime;
++    }
++
++    public BigDecimal getTotalAmount() {
++        return totalAmount;
++    }
++
++    public void setTotalAmount(BigDecimal totalAmount) {
++        this.totalAmount = totalAmount;
++    }
++
++    public List<Product> getProducts() {
++        return ImmutableList.copyOf(products);
++    }
++
++    public void addProduct(Product product) {
++        products.add(product);
++    }
++
++    public void removeProduct(Product product) {
++        products.remove(product);
++    }
++}
+Index: src/main/java/edu/bionic/domain/Product.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/domain/Product.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/domain/Product.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,74 @@
++package edu.bionic.domain;
++
++import java.math.BigDecimal;
++
++public class Product {
++
++    private Integer id;
++    private String name;
++    private BigDecimal price;
++    private Color color;
++    private Integer capacity;
++    private String display;
++
++    public Product(Integer id, String name, BigDecimal price, Color color, Integer capacity, String display) {
++        this.id = id;
++        this.name = name;
++        this.price = price;
++        this.color = color;
++        this.capacity = capacity;
++        this.display = display;
++    }
++
++    public Integer getId() {
++        return id;
++    }
++
++    public void setId(Integer id) {
++        this.id = id;
++    }
++
++    public String getName() {
++        return name;
++    }
++
++    public void setName(String name) {
++        this.name = name;
++    }
++
++    public BigDecimal getPrice() {
++        return price;
++    }
++
++    public void setPrice(BigDecimal price) {
++        this.price = price;
++    }
++
++    public Color getColor() {
++        return color;
++    }
++
++    public void setColor(Color color) {
++        this.color = color;
++    }
++
++    public Integer getCapacity() {
++        return capacity;
++    }
++
++    public void setCapacity(Integer capacity) {
++        this.capacity = capacity;
++    }
++
++    public String getDisplay() {
++        return display;
++    }
++
++    public void setDisplay(String display) {
++        this.display = display;
++    }
++
++    public String printInfo() {
++        return String.format("%d. %s %s %d - %.2f", id, name, color, capacity, price);
++    }
++}
+Index: src/main/java/edu/bionic/presentation/console/ProductConsoleController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/console/ProductConsoleController.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/presentation/console/ProductConsoleController.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,20 @@
++package edu.bionic.presentation.console;
++
++import edu.bionic.service.ProductService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++
++@Controller
++public class ProductConsoleController {
++
++    private ProductService productService;
++
++    @Autowired
++    public ProductConsoleController(ProductService productService) {
++        this.productService = productService;
++    }
++
++    public void printAllProducts() {
++        productService.getAll().forEach(product -> System.out.println(product.printInfo()));
++    }
++}
+Index: src/main/java/edu/bionic/service/OrderService.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/OrderService.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/service/OrderService.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -0,0 +1,13 @@
++package edu.bionic.service;
++
++import edu.bionic.domain.Order;
++import edu.bionic.domain.Product;
++
++import java.util.List;
++
++public interface OrderService {
++
++    List<Order> getAll();
++
++    void createNewOrder(List<Product> products);
++}
+Index: src/main/java/edu/bionic/service/ProductService.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/ProductService.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/service/ProductService.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,12 @@
++package edu.bionic.service;
++
++import edu.bionic.domain.Product;
++
++import java.util.List;
++
++public interface ProductService {
++
++    List<Product> getAll();
++
++    Product getById(int productId);
++}
+Index: src/main/java/edu/bionic/service/impl/OrderServiceImpl.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/impl/OrderServiceImpl.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/service/impl/OrderServiceImpl.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -0,0 +1,36 @@
++package edu.bionic.service.impl;
++
++import edu.bionic.dao.OrderDao;
++import edu.bionic.domain.Order;
++import edu.bionic.domain.Product;
++import edu.bionic.service.OrderService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Service;
++
++import java.math.BigDecimal;
++import java.time.LocalDateTime;
++import java.util.List;
++
++@Service
++public class OrderServiceImpl implements OrderService {
++
++    private OrderDao orderDao;
++
++    @Autowired
++    public OrderServiceImpl(OrderDao orderDao) {
++        this.orderDao = orderDao;
++    }
++
++    @Override
++    public List<Order> getAll() {
++        return orderDao.getAll();
++    }
++
++    @Override
++    public void createNewOrder(List<Product> products) {
++        Order order = new Order(LocalDateTime.now(),
++                products.stream().map(Product::getPrice).reduce(BigDecimal::add).orElse(BigDecimal.ZERO),
++                products);
++        orderDao.save(order);
++    }
++}
+Index: src/main/java/edu/bionic/service/impl/ProductServiceImpl.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/impl/ProductServiceImpl.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/service/impl/ProductServiceImpl.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,37 @@
++package edu.bionic.service.impl;
++
++import edu.bionic.dao.ProductDao;
++import edu.bionic.domain.Product;
++import edu.bionic.service.ProductService;
++import edu.bionic.util.exception.NotFoundException;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Service;
++
++import java.util.Comparator;
++import java.util.List;
++import java.util.stream.Collectors;
++
++@Service
++public class ProductServiceImpl implements ProductService {
++
++    private ProductDao productDao;
++
++    @Autowired
++    public ProductServiceImpl(ProductDao productDao) {
++        this.productDao = productDao;
++    }
++
++    @Override
++    public List<Product> getAll() {
++        return productDao.getAll()
++                .stream()
++                .sorted(Comparator.comparing(Product::getName))
++                .collect(Collectors.toList());
++    }
++
++    @Override
++    public Product getById(int productId) {
++        return productDao.getById(productId).
++                orElseThrow(() -> new NotFoundException(String.format("Product with id=%d was not found", productId)));
++    }
++}
+Index: src/main/java/edu/bionic/util/exception/NotFoundException.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/util/exception/NotFoundException.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/java/edu/bionic/util/exception/NotFoundException.java	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,8 @@
++package edu.bionic.util.exception;
++
++public class NotFoundException extends RuntimeException {
++
++    public NotFoundException(String message) {
++        super(message);
++    }
++}
+Index: src/main/resources/spring/spring-app.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/resources/spring/spring-app.xml	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
++++ src/main/resources/spring/spring-app.xml	(revision a3acf34f5866b35080784b07c4868e10eaecbd76)
+@@ -0,0 +1,15 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<beans xmlns="http://www.springframework.org/schema/beans"
++       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++       xmlns:context="http://www.springframework.org/schema/context"
++       xsi:schemaLocation="http://www.springframework.org/schema/beans
++        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
++
++    <bean id="orderDaoMock" class="edu.bionic.dao.mock.OrderDaoMock" init-method="initOrderStorage"/>
++    <bean id="productDaoMock" class="edu.bionic.dao.mock.ProductDaoMock" init-method="initProductStorage"/>
++
++    <context:annotation-config/>
++    <context:component-scan base-package="edu.bionic.service"/>
++    <context:component-scan base-package="edu.bionic.presentation"/>
++
++</beans>
+\ No newline at end of file
+Index: src/main/java/edu/bionic/config/AppConfig.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/config/AppConfig.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/config/AppConfig.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -0,0 +1,4 @@
++package edu.bionic.config;
++
++public class AppConfig {
++}
+Index: src/main/java/edu/bionic/presentation/console/OrderConsoleController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/console/OrderConsoleController.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/presentation/console/OrderConsoleController.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -0,0 +1,59 @@
++package edu.bionic.presentation.console;
++
++import edu.bionic.domain.Order;
++import edu.bionic.domain.Product;
++import edu.bionic.service.OrderService;
++import edu.bionic.service.ProductService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++
++import java.util.ArrayList;
++import java.util.List;
++
++@Controller
++public class OrderConsoleController {
++
++    private OrderService orderService;
++    private ProductService productService;
++
++    private List<Product> basket = new ArrayList<>();
++
++    @Autowired
++    public OrderConsoleController(OrderService orderService, ProductService productService) {
++        this.orderService = orderService;
++        this.productService = productService;
++    }
++
++    public void addProductToBasket(int productId) {
++        Product selectedProduct = productService.getById(productId);
++        basket.add(selectedProduct);
++    }
++
++    public void printProductsInBasket() {
++        if (!basket.isEmpty()) {
++            System.out.println("В корзине:");
++            basket.forEach(product -> System.out.println(product.printInfo()));
++            System.out.println("");
++        }
++    }
++
++    public void saveOrder() {
++        orderService.createNewOrder(basket);
++        basket = new ArrayList<>();
++    }
++
++    public void printPreviousOrders() {
++        List<Order> orders = orderService.getAll();
++        if (orders.isEmpty()) {
++            System.out.println("Нет ниодного заказа");
++        } else {
++            System.out.println("Предыдущие заказы:");
++            orders.forEach(order -> {
++                System.out.println(order.getDateTime().toString() + ":");
++                order.getProducts().forEach(product -> System.out.println("\t" + product.printInfo()));
++                System.out.println("Общая сумма: " + order.getTotalAmount());
++            });
++            System.out.println();
++        }
++    }
++}
+Index: useful-resourses.md
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- useful-resourses.md	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ useful-resourses.md	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
+@@ -0,0 +1,22 @@
++## Java Pre Production Course
++
++### Lecture 1
++1. VCS, Git
++   * [Wiki: Система Управления Вериями.](https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8)
++    [DVCS](https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8#.D0.A0.D0.B0.D1.81.D0.BF.D1.80.D0.B5.D0.B4.D0.B5.D0.BB.D1.91.D0.BD.D0.BD.D1.8B.D0.B5_.D1.81.D0.B8.D1.81.D1.82.D0.B5.D0.BC.D1.8B_.D1.83.D0.BF.D1.80.D0.B0.D0.B2.D0.BB.D0.B5.D0.BD.D0.B8.D1.8F_.D0.B2.D0.B5.D1.80.D1.81.D0.B8.D1.8F.D0.BC.D0.B8)
++   * [Git. История. Описание возможностей](http://zzet.org/git/learning/undev/coursify/2014/02/09/lection-1-git-course-undev.html)
++   * [Интеративный обучащий курс 1](http://learngitbranching.js.org/)
++   * [Интеративный обучающий курс 2 (англ.)](https://try.github.io/levels/1/challenges/1)
++2. Maven
++   * [Руководство по Maven](http://www.apache-maven.ru/index.html)
++   * [Жизненный цикл сборки проекта (англ.)](http://www.apache-maven.ru/index.html)
++   * [Управление зависимостями (англ.)](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)
++   * [Maven Complete Guide (англ.)](http://books.sonatype.com/mvnref-book/reference/index.html)
++### Lecture 2
++   * [Wiki: Слои приложения (англ.)](https://en.wikipedia.org/wiki/Multitier_architecture)
++   * [Wiki: Spring Framework](https://ru.wikipedia.org/wiki/Spring_Framework)
++   * [Этапы инициализации Spring Context](https://habrahabr.ru/post/222579/)
++   * [Документация Spring IoC Framework (англ.)(7-7.6.1; 7.9-7.13)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html)
++   * [Book: Spring In Action 4 (рус.\англ.)(Разделы 2-3)](https://www.manning.com/books/spring-in-action-fourth-edition)
++   * [Полная документация всех модулей Spring (англ.\обзорно)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html)
++   * [Google Guava Wiki (англ.\обзорно)](https://github.com/google/guava/wiki)
+\ No newline at end of file
+Index: src/main/java/edu/bionic/Product.java
+===================================================================
+--- src/main/java/edu/bionic/Product.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
++++ src/main/java/edu/bionic/Product.java	(revision 60713bbb5f5a911ccf3de6abacf18552481a7c97)
+@@ -1,38 +0,0 @@
+-package edu.bionic;
+-
+-public class Product {
+-
+-    private Integer id;
+-    private String name;
+-    private double price;
+-
+-    public Product(Integer id, String name, double price) {
+-        this.id = id;
+-        this.name = name;
+-        this.price = price;
+-    }
+-
+-    public Integer getId() {
+-        return id;
+-    }
+-
+-    public void setId(Integer id) {
+-        this.id = id;
+-    }
+-
+-    public String getName() {
+-        return name;
+-    }
+-
+-    public void setName(String name) {
+-        this.name = name;
+-    }
+-
+-    public double getPrice() {
+-        return price;
+-    }
+-
+-    public void setPrice(double price) {
+-        this.price = price;
+-    }
+-}
Index: IStoreApp/Topic_2_HW.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_2_HW.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_2_HW.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,496 @@
+Index: src/main/java/edu/bionic/ConsoleApplication.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/ConsoleApplication.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/ConsoleApplication.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -1,8 +1,12 @@
+ package edu.bionic;
+ 
++import edu.bionic.config.AppConfig;
++import edu.bionic.presentation.console.CommentConsoleController;
+ import edu.bionic.presentation.console.OrderConsoleController;
+ import edu.bionic.presentation.console.ProductConsoleController;
+ import org.springframework.context.ApplicationContext;
++import org.springframework.context.ConfigurableApplicationContext;
++import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+ import org.springframework.context.support.ClassPathXmlApplicationContext;
+ 
+ import java.io.BufferedReader;
+@@ -11,27 +15,37 @@
+ 
+ public class ConsoleApplication {
+ 
+-    private static BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in));
++    public static BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in));
+ 
+     private static ProductConsoleController productController;
+     private static OrderConsoleController orderConsoleController;
++    private static CommentConsoleController commentConsoleController;
+ 
+     public static void main(String[] args) throws IOException {
+-        ApplicationContext context =
+-                new ClassPathXmlApplicationContext(new String[]{"spring/spring-app.xml"});
++        ApplicationContext context = loadJavaConfigContext();
+ 
+         productController = context.getBean("productConsoleController", ProductConsoleController.class);
+         orderConsoleController = context.getBean("orderConsoleController", OrderConsoleController.class);
++        commentConsoleController = context.getBean("commentConsoleController", CommentConsoleController.class);
+ 
+         startPage();
+     }
+ 
++    private static ApplicationContext loadXmlContext() {
++        return new ClassPathXmlApplicationContext(new String[]{"spring/spring-app.xml"});
++    }
++
++    private static ApplicationContext loadJavaConfigContext() {
++        return new AnnotationConfigApplicationContext(AppConfig.class);
++    }
++
+     private static void startPage() throws IOException {
+         System.out.println("Добро пожаловать в iStore");
+         System.out.println();
+         System.out.println("Выберите действие:");
+-        System.out.println("1. Купить товары");
+-        System.out.println("2. Просмотреть заказы");
++        System.out.println("1. Посмотреть и купить товары");
++        System.out.println("2. Просмотреть предыдущие заказы");
++        System.out.println("3. Оставить отзыв о товарах");
+         System.out.println("0. Выйти из приложения");
+         switch (consoleReader.readLine()) {
+             case "1":
+@@ -42,6 +56,9 @@
+                 System.out.println("---------------------------------------");
+                 printOrders();
+                 break;
++            case "3":
++                System.out.println("---------------------------------------");
++                leaveCommentPage();
+             case "0":
+                 System.exit(0);
+             default:
+@@ -62,15 +79,53 @@
+             orderConsoleController.saveOrder();
+             startPage();
+         } else {
+-            orderConsoleController.addProductToBasket(enteredNumber);
++            productPage(enteredNumber);
+         }
+         System.out.println("--------------------------------------");
+         byuProducts();
+     }
+ 
++    private static void productPage(int productId) throws IOException {
++        productController.printProductInfo(productId);
++        System.out.println();
++        commentConsoleController.printCommentForProduct(productId);
++        System.out.println();
++        System.out.println("Выберите действие:");
++        System.out.println("1. Купить товар");
++        System.out.println("0. Вернуться");
++
++        int enteredNumber = Integer.parseInt(consoleReader.readLine());
++        if (enteredNumber == 1) {
++            orderConsoleController.addProductToBasket(enteredNumber);
++            byuProducts();
++        } else if (enteredNumber == 0) {
++            byuProducts();
++        }
++        System.out.println("--------------------------------------");
++        productPage(productId);
++    }
++
++
+     private static void printOrders() throws IOException {
+         orderConsoleController.printPreviousOrders();
+         System.out.println("--------------------------------------");
+         startPage();
+     }
++
++    private static void leaveCommentPage() throws IOException {
++        System.out.println("Выберите товар, который хотите оценить:");
++        productController.printAllProducts();
++        System.out.println();
++        System.out.println("0. Вернуться на главную");
++
++        int enteredNumber = Integer.parseInt(consoleReader.readLine());
++        if (enteredNumber == 0) {
++            startPage();
++        } else {
++            commentConsoleController.createNewComment(enteredNumber);
++            System.out.println("Спасибо, ваш отзыв сохранен. Возвращаемся на главную.");
++            System.out.println("--------------------------------------");
++            startPage();
++        }
++    }
+ }
+Index: src/main/java/edu/bionic/config/AppConfig.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/config/AppConfig.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/config/AppConfig.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -1,4 +1,37 @@
+ package edu.bionic.config;
+ 
++import edu.bionic.dao.CommentDao;
++import edu.bionic.dao.OrderDao;
++import edu.bionic.dao.ProductDao;
++import edu.bionic.dao.mock.CommentDaoMock;
++import edu.bionic.dao.mock.OrderDaoMock;
++import edu.bionic.dao.mock.ProductDaoMock;
++import org.springframework.context.annotation.Bean;
++import org.springframework.context.annotation.ComponentScan;
++import org.springframework.context.annotation.Configuration;
++
++@Configuration
++@ComponentScan({"edu.bionic.service", "edu.bionic.presentation"})
+ public class AppConfig {
++
++    @Bean
++    public OrderDao orderDaoMock() {
++        OrderDaoMock orderDaoMock = new OrderDaoMock();
++        orderDaoMock.initOrderStorage();
++        return orderDaoMock;
++    }
++
++    @Bean
++    public ProductDao productDaoMock() {
++        ProductDaoMock productDaoMock = new ProductDaoMock();
++        productDaoMock.initProductStorage();;
++        return productDaoMock;
++    }
++
++    @Bean
++    public CommentDao commentDaoMock() {
++        CommentDaoMock commentDaoMock = new CommentDaoMock();
++        commentDaoMock.initCommentStorage();;
++        return commentDaoMock;
++    }
+ }
+Index: src/main/java/edu/bionic/dao/CommentDao.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/dao/CommentDao.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ src/main/java/edu/bionic/dao/CommentDao.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -0,0 +1,11 @@
++package edu.bionic.dao;
++
++import edu.bionic.domain.Comment;
++
++import java.util.List;
++
++public interface CommentDao {
++
++    List<Comment> getByProduct(int productId);
++    void save(Comment comment);
++}
+Index: src/main/java/edu/bionic/dao/mock/CommentDaoMock.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/dao/mock/CommentDaoMock.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ src/main/java/edu/bionic/dao/mock/CommentDaoMock.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -0,0 +1,54 @@
++package edu.bionic.dao.mock;
++
++import edu.bionic.dao.CommentDao;
++import edu.bionic.domain.Comment;
++
++import java.time.LocalDateTime;
++import java.time.Month;
++import java.util.ArrayList;
++import java.util.List;
++import java.util.stream.Collectors;
++
++public class CommentDaoMock implements CommentDao {
++
++    private List<Comment> commentStorage;
++
++    @Override
++    public List<Comment> getByProduct(int productId) {
++        return commentStorage
++                .stream()
++                .filter(comment -> comment.getProductId() == productId)
++                .collect(Collectors.toList());
++    }
++
++    @Override
++    public void save(Comment comment) {
++        commentStorage.add(comment);
++    }
++
++    public void initCommentStorage() {
++        commentStorage = new ArrayList<>();
++
++        commentStorage.add(new Comment(
++                1,
++                "Сергей",
++                LocalDateTime.of(2016, Month.DECEMBER, 28, 13, 0),
++                "Отличный девайс. Пользуюсь уже около года. Никаких замечаний",
++                5
++        ));
++        commentStorage.add(new Comment(
++                4,
++                "Анна",
++                LocalDateTime.of(2017, Month.MARCH, 12, 15, 0),
++                "Возникли проблемы на второй месяц использования. Пропадает зук в динамиках",
++                3
++        ));
++        commentStorage.add(new Comment(
++                1,
++                "Инна",
++                LocalDateTime.of(2017, Month.APRIL, 5, 10, 30),
++                "Хоший телефон. Единственный недостаток это цена :(",
++                4
++        ));
++    }
++}
+Index: src/main/java/edu/bionic/domain/Comment.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/domain/Comment.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ src/main/java/edu/bionic/domain/Comment.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -0,0 +1,65 @@
++package edu.bionic.domain;
++
++import java.time.LocalDateTime;
++
++public class Comment {
++
++    private Integer productId;
++
++    private String author;
++    private LocalDateTime dateTime;
++    private String text;
++    private Integer rating;
++
++    public Comment(Integer productId, String author, LocalDateTime dateTime, String text, Integer rating) {
++        this.productId = productId;
++        this.author = author;
++        this.dateTime = dateTime;
++        this.text = text;
++        this.rating = rating;
++    }
++
++    public Comment() {
++
++    }
++
++    public Integer getProductId() {
++        return productId;
++    }
++
++    public void setProductId(Integer productId) {
++        this.productId = productId;
++    }
++
++    public String getAuthor() {
++        return author;
++    }
++
++    public void setAuthor(String author) {
++        this.author = author;
++    }
++
++    public LocalDateTime getDateTime() {
++        return dateTime;
++    }
++
++    public void setDateTime(LocalDateTime dateTime) {
++        this.dateTime = dateTime;
++    }
++
++    public String getText() {
++        return text;
++    }
++
++    public void setText(String text) {
++        this.text = text;
++    }
++
++    public Integer getRating() {
++        return rating;
++    }
++
++    public void setRating(Integer rating) {
++        this.rating = rating;
++    }
++}
+Index: src/main/java/edu/bionic/presentation/console/CommentConsoleController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/console/CommentConsoleController.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ src/main/java/edu/bionic/presentation/console/CommentConsoleController.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -0,0 +1,56 @@
++package edu.bionic.presentation.console;
++
++import edu.bionic.ConsoleApplication;
++import edu.bionic.domain.Comment;
++import edu.bionic.service.CommentService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++
++import java.io.IOException;
++import java.util.List;
++
++@Controller
++public class CommentConsoleController {
++
++    private CommentService commentService;
++
++    @Autowired
++    public CommentConsoleController(CommentService commentService1) {
++        this.commentService = commentService1;
++    }
++
++    public void printCommentForProduct(int productId) {
++        List<Comment> comments = commentService.getByProduct(productId);
++
++        comments.forEach(comment -> {
++            System.out.println(String.format(
++                    "%s. %s. Рейтинг - %d\n%s\n",
++                    comment.getAuthor(),
++                    comment.getDateTime().toString(),
++                    comment.getRating(),
++                    comment.getText()));
++        });
++        if (comments.size() == 0) System.out.println("Отзывов пока нет :(");
++    }
++
++    public void createNewComment(int productId) throws IOException {
++        System.out.println("Введите имя:");
++        String name = ConsoleApplication.consoleReader.readLine();
++        System.out.println("Оцените продукт (0-5):");
++        Integer rating = Integer.parseInt(ConsoleApplication.consoleReader.readLine());
++        System.out.println("Оставьте расширенный отзыв:");
++        String text = ConsoleApplication.consoleReader.readLine();
++
++        // validation
++        if (rating > 5) rating = 5;
++        else if (rating < 0) rating = 0;
++
++        Comment newComment = new Comment();
++        newComment.setProductId(productId);
++        newComment.setAuthor(name);
++        newComment.setRating(rating);
++        newComment.setText(text);
++
++        commentService.createNew(newComment);
++    }
++}
+Index: src/main/java/edu/bionic/presentation/console/ProductConsoleController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/console/ProductConsoleController.java	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/java/edu/bionic/presentation/console/ProductConsoleController.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -1,5 +1,6 @@
+ package edu.bionic.presentation.console;
+ 
++import edu.bionic.domain.Product;
+ import edu.bionic.service.ProductService;
+ import org.springframework.beans.factory.annotation.Autowired;
+ import org.springframework.stereotype.Controller;
+@@ -17,4 +18,14 @@
+     public void printAllProducts() {
+         productService.getAll().forEach(product -> System.out.println(product.printInfo()));
+     }
++
++    public void printProductInfo(int productId) {
++        Product product = productService.getById(productId);
++
++        System.out.println("Наименование: " + product.getName());
++        System.out.println("Цвет: " + product.getColor());
++        System.out.println("Память: " + product.getCapacity());
++        System.out.println("Дисплей: " + product.getDisplay());
++        System.out.println("Цена: " + product.getPrice());
++    }
+ }
+Index: src/main/java/edu/bionic/service/CommentService.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/CommentService.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ src/main/java/edu/bionic/service/CommentService.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -0,0 +1,12 @@
++package edu.bionic.service;
++
++import edu.bionic.domain.Comment;
++
++import java.util.List;
++
++public interface CommentService {
++
++    List<Comment> getByProduct(int productId);
++    void createNew(Comment comment);
++
++}
+Index: src/main/java/edu/bionic/service/impl/CommentServiceImpl.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/impl/CommentServiceImpl.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ src/main/java/edu/bionic/service/impl/CommentServiceImpl.java	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -0,0 +1,33 @@
++package edu.bionic.service.impl;
++
++import edu.bionic.dao.CommentDao;
++import edu.bionic.domain.Comment;
++import edu.bionic.service.CommentService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++import org.springframework.stereotype.Service;
++
++import java.time.LocalDateTime;
++import java.util.List;
++
++@Service
++public class CommentServiceImpl implements CommentService {
++
++    private CommentDao commentDao;
++
++    @Autowired
++    public CommentServiceImpl(CommentDao commentDao) {
++        this.commentDao = commentDao;
++    }
++
++    @Override
++    public List<Comment> getByProduct(int productId) {
++        return commentDao.getByProduct(productId);
++    }
++
++    @Override
++    public void createNew(Comment comment) {
++        comment.setDateTime(LocalDateTime.now());
++        commentDao.save(comment);
++    }
++}
+Index: src/main/resources/spring/spring-app.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/resources/spring/spring-app.xml	(revision d7706e385744d474331d1c8f4b85d4482cbd344a)
++++ src/main/resources/spring/spring-app.xml	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
+@@ -7,6 +7,7 @@
+ 
+     <bean id="orderDaoMock" class="edu.bionic.dao.mock.OrderDaoMock" init-method="initOrderStorage"/>
+     <bean id="productDaoMock" class="edu.bionic.dao.mock.ProductDaoMock" init-method="initProductStorage"/>
++    <bean id="commentDaoMock" class="edu.bionic.dao.mock.CommentDaoMock" init-method="initCommentStorage"/>
+ 
+     <context:annotation-config/>
+     <context:component-scan base-package="edu.bionic.service"/>
Index: IStoreApp/Topic_3.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_3.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_3.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,153 @@
+Index: pom.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- pom.xml	(revision 8d853fa0eb29bbf46f351094fbb68846e830bfde)
++++ pom.xml	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -8,14 +8,20 @@
+     <artifactId>istore</artifactId>
+     <version>1.0-SNAPSHOT</version>
+ 
+-    <packaging>jar</packaging>
++    <packaging>war</packaging>
+     <name>iStore WebApplication</name>
+ 
+     <properties>
++        <!-- Coren-->
+         <java.version>1.8</java.version>
+         <guava.version>22.0</guava.version>
+ 
++        <!-- Spring -->
+         <spring.version>4.3.9.RELEASE</spring.version>
++
++        <!-- Web -->
++        <servlet.api.version>3.1.0</servlet.api.version>
++        <jsp.api.version>2.3.1</jsp.api.version>
+     </properties>
+ 
+     <build>
+@@ -31,6 +37,16 @@
+                     <target>${java.version}</target>
+                 </configuration>
+             </plugin>
++            <plugin>
++                <groupId>org.apache.tomcat.maven</groupId>
++                <artifactId>tomcat7-maven-plugin</artifactId>
++                <version>2.2</version>
++                <configuration>
++                    <path>/</path>
++                    <port>8080</port>
++                </configuration>
++            </plugin>
++
+         </plugins>
+     </build>
+ 
+@@ -53,6 +69,20 @@
+             <groupId>org.springframework</groupId>
+             <artifactId>spring-context-support</artifactId>
+             <version>${spring.version}</version>
++        </dependency>
++        <!-- Java Servlet API -->
++        <dependency>
++            <groupId>javax.servlet</groupId>
++            <artifactId>javax.servlet-api</artifactId>
++            <version>${servlet.api.version}</version>
++            <scope>provided</scope>
++        </dependency>
++        <!-- Java Server Pages API -->
++        <dependency>
++            <groupId>javax.servlet.jsp</groupId>
++            <artifactId>javax.servlet.jsp-api</artifactId>
++            <version>${jsp.api.version}</version>
++            <scope>provided</scope>
+         </dependency>
+     </dependencies>
+ 
+Index: src/main/java/edu/bionic/presentation/servlet/HelloServlet.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/servlet/HelloServlet.java	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/java/edu/bionic/presentation/servlet/HelloServlet.java	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -0,0 +1,15 @@
++package edu.bionic.presentation.servlet;
++
++import javax.servlet.ServletException;
++import javax.servlet.http.HttpServlet;
++import javax.servlet.http.HttpServletRequest;
++import javax.servlet.http.HttpServletResponse;
++import java.io.IOException;
++
++public class HelloServlet extends HttpServlet {
++
++    @Override
++    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
++        resp.getWriter().print("<h1>Hello world!</h1>");
++    }
++}
+Index: src/main/java/edu/bionic/presentation/servlet/HomeServlet.java
+===================================================================
+--- src/main/java/edu/bionic/presentation/servlet/HomeServlet.java	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/java/edu/bionic/presentation/servlet/HomeServlet.java	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -0,0 +1,19 @@
++package edu.bionic.presentation.servlet;
++
++import javax.servlet.ServletException;
++import javax.servlet.annotation.WebServlet;
++import javax.servlet.http.HttpServlet;
++import javax.servlet.http.HttpServletRequest;
++import javax.servlet.http.HttpServletResponse;
++import java.io.IOException;
++
++@WebServlet({"/home", ""})
++public class HomeServlet extends HttpServlet {
++
++    @Override
++    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
++        req.setAttribute("text", "Welcome to Bionic Team");
++
++        req.getRequestDispatcher("/example.jsp").forward(req, resp);
++    }
++}
+Index: src/main/webapp/WEB-INF/web.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/web.xml	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/webapp/WEB-INF/web.xml	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -0,0 +1,16 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
++         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
++         version="3.1">
++
++    <servlet>
++        <servlet-name>productServlet</servlet-name>
++        <servlet-class>edu.bionic.presentation.servlet.HelloServlet</servlet-class>
++    </servlet>
++
++    <servlet-mapping>
++        <servlet-name>productServlet</servlet-name>
++        <url-pattern>/hello</url-pattern>
++    </servlet-mapping>
++</web-app>
+\ No newline at end of file
+Index: src/main/webapp/example.jsp
+===================================================================
+--- src/main/webapp/example.jsp	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/webapp/example.jsp	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -0,0 +1,9 @@
++<%@ page contentType="text/html;charset=UTF-8" language="java" %>
++<html>
++  <head>
++    <title>Welcome Page</title>
++  </head>
++  <body>
++    <h1>${text}</h1>
++  </body>
++</html>
Index: IStoreApp/Topic_4.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_4.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_4.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,224 @@
+Index: pom.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- pom.xml	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ pom.xml	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
+@@ -22,6 +22,7 @@
+         <!-- Web -->
+         <servlet.api.version>3.1.0</servlet.api.version>
+         <jsp.api.version>2.3.1</jsp.api.version>
++        <jstl.version>1.2</jstl.version>
+     </properties>
+ 
+     <build>
+@@ -70,6 +71,12 @@
+             <artifactId>spring-context-support</artifactId>
+             <version>${spring.version}</version>
+         </dependency>
++        <!-- Spring Web support -->
++        <dependency>
++            <groupId>org.springframework</groupId>
++            <artifactId>spring-web</artifactId>
++            <version>${spring.version}</version>
++        </dependency>
+         <!-- Java Servlet API -->
+         <dependency>
+             <groupId>javax.servlet</groupId>
+@@ -84,6 +91,13 @@
+             <version>${jsp.api.version}</version>
+             <scope>provided</scope>
+         </dependency>
++        <!-- JSTL Libraty -->
++        <dependency>
++            <groupId>javax.servlet</groupId>
++            <artifactId>jstl</artifactId>
++            <version>${jstl.version}</version>
++        </dependency>
++
+     </dependencies>
+ 
+ 
+Index: src/main/java/edu/bionic/presentation/servlet/ProductServlet.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/servlet/ProductServlet.java	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ src/main/java/edu/bionic/presentation/servlet/ProductServlet.java	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
+@@ -0,0 +1,49 @@
++package edu.bionic.presentation.servlet;
++
++import edu.bionic.domain.Product;
++import edu.bionic.service.ProductService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.context.ApplicationContext;
++import org.springframework.web.context.support.SpringBeanAutowiringSupport;
++import org.springframework.web.context.support.WebApplicationContextUtils;
++
++import javax.servlet.ServletConfig;
++import javax.servlet.ServletException;
++import javax.servlet.annotation.WebServlet;
++import javax.servlet.http.HttpServlet;
++import javax.servlet.http.HttpServletRequest;
++import javax.servlet.http.HttpServletResponse;
++import java.io.IOException;
++
++@WebServlet("/products")
++public class ProductServlet extends HttpServlet {
++
++    private ProductService productService;
++
++    @Autowired
++    public void setProductService(ProductService productService) {
++        this.productService = productService;
++    }
++
++    @Override
++    public void init() throws ServletException {
++        super.init();
++        SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);
++
++//        ApplicationContext context = WebApplicationContextUtils.getRequiredWebApplicationContext(this.getServletContext());
++//        productService = context.getBean("productServiceImpl",  ProductService.class);
++    }
++
++    @Override
++    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
++//        productService.getAll().forEach(product -> {
++//            try {
++//                resp.getWriter().println(product.printInfo());
++//            } catch (IOException e) {
++//                e.printStackTrace();
++//            }
++//        });
++        req.setAttribute("products", productService.getAll());
++        req.getRequestDispatcher("/WEB-INF/views/products.jsp").forward(req, resp);
++    }
++}
+Index: src/main/webapp/WEB-INF/views/products.jsp
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/views/products.jsp	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ src/main/webapp/WEB-INF/views/products.jsp	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
+@@ -0,0 +1,25 @@
++<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
++<%@ page contentType="text/html;charset=UTF-8" language="java" %>
++<html>
++<head>
++    <title>Каталог товаров</title>
++</head>
++<body>
++    <h1>Каталог товаров iShop</h1>
++    <ul>
++        <%--<%--%>
++            <%--List<Product> products = (List<Product>) request.getAttribute("products");--%>
++            <%--for (Product product : products) {--%>
++        <%--%>--%>
++            <%--<li><%= product.printInfo() %></li>--%>
++        <%--<%--%>
++            <%--};--%>
++        <%--%>--%>
++        <c:forEach items="${products}" var="product">
++            <jsp:useBean id="product" type="edu.bionic.domain.Product"/>
++            <%--<li><c:out value="${product.printInfo()}"/></li>--%>
++            <li>${product.printInfo()}</li>
++        </c:forEach>
++    </ul>
++</body>
++</html>
+Index: src/main/webapp/WEB-INF/web.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/web.xml	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/webapp/WEB-INF/web.xml	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
+@@ -4,13 +4,14 @@
+          xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
+          version="3.1">
+ 
+-    <servlet>
+-        <servlet-name>productServlet</servlet-name>
+-        <servlet-class>edu.bionic.presentation.servlet.HelloServlet</servlet-class>
+-    </servlet>
++    <!-- Location of spring config files -->
++    <context-param>
++        <param-name>contextConfigLocation</param-name>
++        <param-value>classpath:spring/spring-app.xml</param-value>
++    </context-param>
+ 
+-    <servlet-mapping>
+-        <servlet-name>productServlet</servlet-name>
+-        <url-pattern>/hello</url-pattern>
+-    </servlet-mapping>
++    <!-- Bootstrap the root application context using ContextLoaderListener -->
++    <listener>
++        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
++    </listener>
+ </web-app>
+\ No newline at end of file
+Index: src/main/webapp/index.html
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/index.html	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ src/main/webapp/index.html	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
+@@ -0,0 +1,14 @@
++<!DOCTYPE html>
++<html lang="en">
++<head>
++    <meta charset="UTF-8">
++    <title>iShop</title>
++</head>
++<body>
++    <h1>Welcome to iShop</h1>
++    <ul>
++        <li><a href="/products">Каталог товаров</a></li>
++        <li><a href="/orders">Предыдущие заказы</a></li>
++    </ul>
++</body>
++</html>
+\ No newline at end of file
+Index: src/main/java/edu/bionic/presentation/servlet/HomeServlet.java
+===================================================================
+--- src/main/java/edu/bionic/presentation/servlet/HomeServlet.java	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/java/edu/bionic/presentation/servlet/HomeServlet.java	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -1,19 +0,0 @@
+-package edu.bionic.presentation.servlet;
+-
+-import javax.servlet.ServletException;
+-import javax.servlet.annotation.WebServlet;
+-import javax.servlet.http.HttpServlet;
+-import javax.servlet.http.HttpServletRequest;
+-import javax.servlet.http.HttpServletResponse;
+-import java.io.IOException;
+-
+-@WebServlet({"/home", ""})
+-public class HomeServlet extends HttpServlet {
+-
+-    @Override
+-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+-        req.setAttribute("text", "Welcome to Bionic Team");
+-
+-        req.getRequestDispatcher("/example.jsp").forward(req, resp);
+-    }
+-}
+Index: src/main/webapp/example.jsp
+===================================================================
+--- src/main/webapp/example.jsp	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
++++ src/main/webapp/example.jsp	(revision 4bf05f1b722f678adf920abbb146c6d2404fc8b4)
+@@ -1,9 +0,0 @@
+-<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+-<html>
+-  <head>
+-    <title>Welcome Page</title>
+-  </head>
+-  <body>
+-    <h1>${text}</h1>
+-  </body>
+-</html>
Index: IStoreApp/Topic_5.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_5.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_5.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,307 @@
+Index: pom.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- pom.xml	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ pom.xml	(revision 3af50c17e13e746be5c7590063400a583df0a83d)
+@@ -71,10 +71,10 @@
+             <artifactId>spring-context-support</artifactId>
+             <version>${spring.version}</version>
+         </dependency>
+-        <!-- Spring Web support -->
++        <!-- Spring Web MVC -->
+         <dependency>
+             <groupId>org.springframework</groupId>
+-            <artifactId>spring-web</artifactId>
++            <artifactId>spring-webmvc</artifactId>
+             <version>${spring.version}</version>
+         </dependency>
+         <!-- Java Servlet API -->
+Index: src/main/java/edu/bionic/presentation/controller/ProductController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/controller/ProductController.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/java/edu/bionic/presentation/controller/ProductController.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -0,0 +1,47 @@
++package edu.bionic.presentation.controller;
++
++import edu.bionic.domain.Order;
++import edu.bionic.service.CommentService;
++import edu.bionic.service.OrderService;
++import edu.bionic.service.ProductService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++import org.springframework.ui.Model;
++import org.springframework.web.bind.annotation.*;
++
++import java.time.format.DateTimeFormatter;
++
++@Controller
++@RequestMapping("products")
++@SessionAttributes("basket")
++public class ProductController {
++
++    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("d-MM-yyyy HH:mm");
++
++    private ProductService productService;
++    private CommentService commentService;
++    private OrderService orderService;
++
++    @Autowired
++    public ProductController(ProductService productService, CommentService commentService, OrderService orderService) {
++        this.productService = productService;
++        this.commentService = commentService;
++        this.orderService = orderService;
++    }
++
++    @GetMapping
++    public String showProducts(Model model) {
++        model.addAttribute("products",  productService.getAll());
++        return "product-list";
++    }
++
++    @GetMapping("{productId}")
++    public String showProduct(Model model, @PathVariable("productId") Integer productId) {
++        model.addAttribute(productService.getById(productId));
++        model.addAttribute("comments", commentService.getByProduct(productId));
++        model.addAttribute("dateTimeFormatter", dateTimeFormatter);
++
++        return "product";
++    }
++
++}
+Index: src/main/java/edu/bionic/presentation/servlet/ProductServlet.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/servlet/ProductServlet.java	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ src/main/java/edu/bionic/presentation/servlet/ProductServlet.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -15,7 +15,7 @@
+ import javax.servlet.http.HttpServletResponse;
+ import java.io.IOException;
+ 
+-@WebServlet("/products")
++//@WebServlet("/products")
+ public class ProductServlet extends HttpServlet {
+ 
+     private ProductService productService;
+@@ -44,6 +44,6 @@
+ //            }
+ //        });
+         req.setAttribute("products", productService.getAll());
+-        req.getRequestDispatcher("/WEB-INF/views/products.jsp").forward(req, resp);
++        req.getRequestDispatcher("/WEB-INF/views/product-list.jsp").forward(req, resp);
+     }
+ }
+Index: src/main/resources/spring/spring-app.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/resources/spring/spring-app.xml	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ src/main/resources/spring/spring-app.xml	(revision 3af50c17e13e746be5c7590063400a583df0a83d)
+@@ -11,6 +11,6 @@
+ 
+     <context:annotation-config/>
+     <context:component-scan base-package="edu.bionic.service"/>
+-    <context:component-scan base-package="edu.bionic.presentation"/>
++    <context:component-scan base-package="edu.bionic.presentation.console"/>
+ 
+ </beans>
+\ No newline at end of file
+Index: src/main/resources/spring/spring-mvc.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/resources/spring/spring-mvc.xml	(revision 3af50c17e13e746be5c7590063400a583df0a83d)
++++ src/main/resources/spring/spring-mvc.xml	(revision 3af50c17e13e746be5c7590063400a583df0a83d)
+@@ -0,0 +1,17 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<beans xmlns="http://www.springframework.org/schema/beans"
++       xmlns:mvc="http://www.springframework.org/schema/mvc"
++       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++       xmlns:context="http://www.springframework.org/schema/context"
++       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
++        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
++
++    <mvc:annotation-driven />
++    <context:component-scan base-package="edu.bionic.presentation.controller"/>
++
++    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
++        <property name="prefix" value="/WEB-INF/views/"/>
++        <property name="suffix" value=".jsp"/>
++    </bean>
++
++</beans>
+\ No newline at end of file
+Index: src/main/webapp/WEB-INF/web.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/web.xml	(revision 0a19ee36449d035f31b341e8ea981d105d55e3fc)
++++ src/main/webapp/WEB-INF/web.xml	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -14,4 +14,38 @@
+     <listener>
+         <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
+     </listener>
++
++    <!-- Configuring Spring MVC Dispatcher Servlet-->
++    <servlet>
++        <servlet-name>mvc-dispatcher</servlet-name>
++        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
++        <init-param>
++            <param-name>contextConfigLocation</param-name>
++            <param-value>classpath:spring/spring-mvc.xml</param-value>
++        </init-param>
++        <load-on-startup>1</load-on-startup>
++    </servlet>
++    <servlet-mapping>
++        <servlet-name>mvc-dispatcher</servlet-name>
++        <url-pattern>/</url-pattern>
++    </servlet-mapping>
++
++    <!-- Setting encoding filter to accept UTF-8 data from WEB -->
++    <filter>
++        <filter-name>encodingFilter</filter-name>
++        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
++        <init-param>
++            <param-name>encoding</param-name>
++            <param-value>UTF-8</param-value>
++        </init-param>
++        <init-param>
++            <param-name>forceEncoding</param-name>
++            <param-value>true</param-value>
++        </init-param>
++    </filter>
++    <filter-mapping>
++        <filter-name>encodingFilter</filter-name>
++        <url-pattern>/*</url-pattern>
++    </filter-mapping>
++
+ </web-app>
+\ No newline at end of file
+Index: src/main/java/edu/bionic/presentation/controller/CommentController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/controller/CommentController.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/java/edu/bionic/presentation/controller/CommentController.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -0,0 +1,31 @@
++package edu.bionic.presentation.controller;
++
++import edu.bionic.domain.Comment;
++import edu.bionic.service.CommentService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++import org.springframework.web.bind.annotation.ModelAttribute;
++import org.springframework.web.bind.annotation.PostMapping;
++import org.springframework.web.bind.annotation.RequestMapping;
++
++@Controller
++@RequestMapping("comments")
++public class CommentController {
++
++    private CommentService commentService;
++
++    @Autowired
++    public CommentController(CommentService commentService) {
++        this.commentService = commentService;
++    }
++
++    @PostMapping
++    public String addNewComment(@ModelAttribute Comment comment) {
++        // validation
++        if (comment.getRating() > 5) comment.setRating(5);
++        else if (comment.getRating() < 1) comment.setRating(1);
++
++        commentService.createNew(comment);
++        return "redirect:/products/" + comment.getProductId();
++    }
++}
+Index: src/main/webapp/WEB-INF/views/products.jsp
+===================================================================
+--- src/main/webapp/WEB-INF/views/products.jsp	(revision 3af50c17e13e746be5c7590063400a583df0a83d)
++++ src/main/webapp/WEB-INF/views/product-list.jsp	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -18,7 +18,7 @@
+         <c:forEach items="${products}" var="product">
+             <jsp:useBean id="product" type="edu.bionic.domain.Product"/>
+             <%--<li><c:out value="${product.printInfo()}"/></li>--%>
+-            <li>${product.printInfo()}</li>
++            <li><a href="<c:url value="products/${product.id}"/>">${product.printInfo()}</a></li>
+         </c:forEach>
+     </ul>
+ </body>
+Index: src/main/webapp/WEB-INF/views/product.jsp
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/views/product.jsp	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/webapp/WEB-INF/views/product.jsp	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -0,0 +1,59 @@
++<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
++<%@ page contentType="text/html;charset=UTF-8" language="java" %>
++<html>
++<head>
++    <title>iShop - ${product.name}</title>
++</head>
++<body>
++    <h2>${product.name}</h2>
++    <h3>Цена: ${product.price} USD</h3>
++    <div>
++        <p>
++            <strong>Характеристики:</strong> <br/>
++            Цвет: ${product.color} <br/>
++            Экран: ${product.display} <br/>
++            Память: ${product.capacity} GB<br/>
++        </p>
++        <form method="post" action="<c:url value="/products/${product.id}/addToBasket"/>">
++            <button type="submit">Добавить в корзину</button>
++        </form>
++    </div>
++    <hr/>
++    <div>
++        <h4>Отзывы:</h4>
++        <c:forEach items="${comments}" var="comment">
++            <p>
++                <i>${comment.dateTime.format(dateTimeFormatter)}</i>
++                <strong>${comment.author}</strong> <br/>
++                ${comment.text} <br/>
++                <u>Оценка: ${comment.rating}</u>
++            </p>
++        </c:forEach>
++        <h4>Оставить свой отзыв</h4>
++        <form method="post" action="<c:url value="/comments"/>" >
++            <p>
++                <label for="name">Имя:</label>
++                <input type="text" id="name" name="author"/>
++            </p>
++            <p>
++                <label for="comment">Комментарий:</label>
++                <br/>
++                <textarea id="comment" name="text" rows="10" cols="30"></textarea>
++            </p>
++            <p>
++                <label for="rating">Выставить оценку:</label>
++                <select id="rating" name="rating">
++                    <option>1</option>
++                    <option>2</option>
++                    <option>3</option>
++                    <option>4</option>
++                    <option selected>5</option>
++                </select>
++            </p>
++
++            <input type="hidden" name="productId" value="${product.id}">
++            <button type="submit">Отправить</button>
++        </form>
++    </div>
++</body>
++</html>
Index: IStoreApp/Topic_5_HW.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- IStoreApp/Topic_5_HW.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ IStoreApp/Topic_5_HW.patch	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,326 @@
+Index: pom.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- pom.xml	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ pom.xml	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -36,6 +36,7 @@
+                 <configuration>
+                     <source>${java.version}</source>
+                     <target>${java.version}</target>
++                    <encoding>UTF-8</encoding>
+                 </configuration>
+             </plugin>
+             <plugin>
+Index: src/main/java/edu/bionic/domain/Order.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/domain/Order.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/java/edu/bionic/domain/Order.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -13,6 +13,10 @@
+     private BigDecimal totalAmount;
+     private List<Product> products;
+ 
++    public Order() {
++        this.products = new ArrayList<>();
++    }
++
+     public Order(LocalDateTime dateTime, BigDecimal totalAmount, List<Product> products) {
+         this.dateTime = dateTime;
+         this.totalAmount = totalAmount;
+Index: src/main/java/edu/bionic/presentation/controller/GlobalControllerAdvice.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/controller/GlobalControllerAdvice.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
++++ src/main/java/edu/bionic/presentation/controller/GlobalControllerAdvice.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -0,0 +1,14 @@
++package edu.bionic.presentation.controller;
++
++import edu.bionic.domain.Order;
++import org.springframework.web.bind.annotation.ControllerAdvice;
++import org.springframework.web.bind.annotation.ModelAttribute;
++
++@ControllerAdvice
++public class GlobalControllerAdvice {
++
++    @ModelAttribute("basket")
++    public Order createBasket() {
++        return new Order();
++    }
++}
+Index: src/main/java/edu/bionic/presentation/controller/OrderController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/controller/OrderController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
++++ src/main/java/edu/bionic/presentation/controller/OrderController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -0,0 +1,34 @@
++package edu.bionic.presentation.controller;
++
++import edu.bionic.service.OrderService;
++import org.springframework.beans.factory.annotation.Autowired;
++import org.springframework.stereotype.Controller;
++import org.springframework.ui.Model;
++import org.springframework.web.bind.annotation.GetMapping;
++import org.springframework.web.bind.annotation.RequestMapping;
++import org.springframework.web.bind.annotation.SessionAttributes;
++
++import java.time.format.DateTimeFormatter;
++
++@Controller
++@SessionAttributes("basket")
++@RequestMapping("orders")
++public class OrderController {
++
++    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("d-MM-yyyy HH:mm");
++
++    private OrderService orderService;
++
++    @Autowired
++    public OrderController(OrderService orderService) {
++        this.orderService = orderService;
++    }
++
++    @GetMapping
++    public String showOrders(Model model) {
++        model.addAttribute("orders", orderService.getAll());
++        model.addAttribute("dateTimeFormatter", dateTimeFormatter);
++
++        return "order-list";
++    }
++}
+Index: src/main/java/edu/bionic/presentation/controller/ProductController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/controller/ProductController.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/java/edu/bionic/presentation/controller/ProductController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -44,4 +44,13 @@
+         return "product";
+     }
+ 
++    @PostMapping("{productId}/addToBasket")
++    public String addToBasket(@PathVariable("productId") Integer productId,
++                              @SessionAttribute("basket") Order currentOrder) {
++
++        orderService.addProductToOrder(currentOrder, productId);
++
++        return "redirect:/products/" + productId;
++    }
++
+ }
+Index: src/main/java/edu/bionic/presentation/controller/RootController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/presentation/controller/RootController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
++++ src/main/java/edu/bionic/presentation/controller/RootController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -0,0 +1,13 @@
++package edu.bionic.presentation.controller;
++
++import org.springframework.stereotype.Controller;
++import org.springframework.web.bind.annotation.GetMapping;
++
++@Controller
++public class RootController {
++
++    @GetMapping("/")
++    public String showMainPage() {
++        return "index";
++    }
++}
+Index: src/main/java/edu/bionic/service/OrderService.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/OrderService.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/java/edu/bionic/service/OrderService.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -10,4 +10,6 @@
+     List<Order> getAll();
+ 
+     void createNewOrder(List<Product> products);
++
++    void addProductToOrder(Order order, Integer productId);
+ }
+Index: src/main/java/edu/bionic/service/impl/OrderServiceImpl.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/java/edu/bionic/service/impl/OrderServiceImpl.java	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/java/edu/bionic/service/impl/OrderServiceImpl.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -4,6 +4,7 @@
+ import edu.bionic.domain.Order;
+ import edu.bionic.domain.Product;
+ import edu.bionic.service.OrderService;
++import edu.bionic.service.ProductService;
+ import org.springframework.beans.factory.annotation.Autowired;
+ import org.springframework.stereotype.Service;
+ 
+@@ -15,10 +16,12 @@
+ public class OrderServiceImpl implements OrderService {
+ 
+     private OrderDao orderDao;
++    private ProductService productService;
+ 
+     @Autowired
+-    public OrderServiceImpl(OrderDao orderDao) {
++    public OrderServiceImpl(OrderDao orderDao, ProductService productService) {
+         this.orderDao = orderDao;
++        this.productService = productService;
+     }
+ 
+     @Override
+@@ -33,4 +36,17 @@
+                 products);
+         orderDao.save(order);
+     }
++
++    @Override
++    public void addProductToOrder(Order order, Integer productId) {
++        Product newProduct = productService.getById(productId);
++        order.addProduct(newProduct);
++        order.setTotalAmount(
++                order.getProducts()
++                        .stream()
++                        .map(Product::getPrice)
++                        .reduce(BigDecimal::add)
++                        .orElse(BigDecimal.ZERO)
++        );
++    }
+ }
+Index: src/main/webapp/WEB-INF/views/index.jsp
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/views/index.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
++++ src/main/webapp/WEB-INF/views/index.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -0,0 +1,14 @@
++<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
++<%@ page contentType="text/html;charset=UTF-8" language="java" %>
++<html>
++<head>
++    <title>Магазин iShop</title>
++</head>
++<body>
++<h1>Welcome to iShop</h1>
++<ul>
++    <li><a href="<c:url value="/products"/>">Каталог товаров</a></li>
++    <li><a href="<c:url value="/orders"/> ">Предыдущие заказы</a></li>
++</ul>
++</body>
++</html>
+Index: src/main/webapp/WEB-INF/views/order-list.jsp
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/views/order-list.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
++++ src/main/webapp/WEB-INF/views/order-list.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -0,0 +1,23 @@
++<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
++<%@ page contentType="text/html;charset=UTF-8" language="java" %>
++<html>
++<head>
++    <title>Предыдущие заказы</title>
++</head>
++<body>
++    <h1>Предыдущие заказы</h1>
++    <c:if test="${orders.size() == 0}">
++        Истоиря заказов на данный момент отсутствует
++    </c:if>
++    <c:forEach items="${orders}" var="order">
++        <p>
++            <strong>Дата:</strong> ${order.dateTime.format(dateTimeFormatter)} <br/>
++            <strong>Общая сумма:</strong> ${order.totalAmount} <br/>
++            <strong>Товары:</strong> <br/>
++            <c:forEach items="${order.products}" var="product">
++                ${product.name} <br/>
++            </c:forEach>
++        </p>
++    </c:forEach>
++</body>
++</html>
+Index: src/main/webapp/WEB-INF/views/product.jsp
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- src/main/webapp/WEB-INF/views/product.jsp	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/webapp/WEB-INF/views/product.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+@@ -5,6 +5,11 @@
+     <title>iShop - ${product.name}</title>
+ </head>
+ <body>
++    <c:if test="${basket.products.size() > 0}">
++        <p><strong><i>Количество товаров в корзине: ${basket.products.size()}.
++            Общая сумма ${basket.totalAmount}</i></strong> </p>
++        <hr/>
++    </c:if>
+     <h2>${product.name}</h2>
+     <h3>Цена: ${product.price} USD</h3>
+     <div>
+@@ -15,6 +20,7 @@
+             Память: ${product.capacity} GB<br/>
+         </p>
+         <form method="post" action="<c:url value="/products/${product.id}/addToBasket"/>">
++            <a href="<c:url value="/products"/>"><button type="button">Вернуться</button></a>
+             <button type="submit">Добавить в корзину</button>
+         </form>
+     </div>
+@@ -41,14 +47,17 @@
+                 <textarea id="comment" name="text" rows="10" cols="30"></textarea>
+             </p>
+             <p>
+-                <label for="rating">Выставить оценку:</label>
+-                <select id="rating" name="rating">
+-                    <option>1</option>
+-                    <option>2</option>
+-                    <option>3</option>
+-                    <option>4</option>
+-                    <option selected>5</option>
+-                </select>
++                <label>Выставить оценку:</label> <br/>
++                <label for="radio1">1</label>
++                <input type="radio" id="radio1" name="rating" value="1">
++                <label for="radio2">2</label>
++                <input type="radio" id="radio2" name="rating" value="2">
++                <label for="radio3">3</label>
++                <input type="radio" id="radio3" name="rating" value="3">
++                <label for="radio4">4</label>
++                <input type="radio" id="radio4" name="rating" value="4">
++                <label for="radio5">5</label>
++                <input type="radio" id="radio5" name="rating" value="5" checked>
+             </p>
+ 
+             <input type="hidden" name="productId" value="${product.id}">
+Index: src/main/webapp/index.html
+===================================================================
+--- src/main/webapp/index.html	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
++++ src/main/webapp/index.html	(revision b1017c9882127cef319a1f4640a477045b4bed5f)
+@@ -1,14 +0,0 @@
+-<!DOCTYPE html>
+-<html lang="en">
+-<head>
+-    <meta charset="UTF-8">
+-    <title>iShop</title>
+-</head>
+-<body>
+-    <h1>Welcome to iShop</h1>
+-    <ul>
+-        <li><a href="/products">Каталог товаров</a></li>
+-        <li><a href="/orders">Предыдущие заказы</a></li>
+-    </ul>
+-</body>
+-</html>
+\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ pom.xml	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -23,6 +23,10 @@
         <servlet.api.version>3.1.0</servlet.api.version>
         <jsp.api.version>2.3.1</jsp.api.version>
         <jstl.version>1.2</jstl.version>
+
+        <!-- Validation -->
+        <validation.api.version>1.1.0.Final</validation.api.version>
+        <hibernate.validation.version>5.4.1.Final</hibernate.validation.version>
     </properties>
 
     <build>
@@ -99,6 +103,18 @@
             <version>${jstl.version}</version>
         </dependency>
 
+        <!--Validation API-->
+        <dependency>
+            <groupId>javax.validation</groupId>
+            <artifactId>validation-api</artifactId>
+            <version>${validation.api.version}</version>
+        </dependency>
+        <!-- Hibernate Validator -->
+        <dependency>
+            <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-validator</artifactId>
+            <version>${hibernate.validation.version}</version>
+        </dependency>
     </dependencies>
 
 
Index: src/main/java/edu/bionic/domain/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/domain/Order.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/domain/Order.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -1,7 +1,8 @@
 package edu.bionic.domain;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
+import org.hibernate.validator.constraints.Email;
+import org.hibernate.validator.constraints.NotBlank;
 
 import java.math.BigDecimal;
 import java.time.LocalDateTime;
@@ -13,6 +14,19 @@
     private BigDecimal totalAmount;
     private List<Product> products;
 
+    @NotBlank(message = "Имя не должно быть пустым")
+    private String name;
+
+    @NotBlank(message = "Это поле должно быть заполнено")
+    @Email(message = "Поле должно содержать правильный email")
+    private String email;
+
+    private String phone;
+
+    @NotBlank(message = "Это поле должно быть заполнено")
+    private String address;
+
+
     public Order() {
         this.products = new ArrayList<>();
     }
@@ -50,4 +64,36 @@
     public void removeProduct(Product product) {
         products.remove(product);
     }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getPhone() {
+        return phone;
+    }
+
+    public void setPhone(String phone) {
+        this.phone = phone;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
 }
Index: src/main/java/edu/bionic/presentation/console/OrderConsoleController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/presentation/console/OrderConsoleController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/presentation/console/OrderConsoleController.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -7,6 +7,8 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -38,7 +40,10 @@
     }
 
     public void saveOrder() {
-        orderService.createNewOrder(basket);
+        Order newOrder = new Order(LocalDateTime.now(),
+                basket.stream().map(Product::getPrice).reduce(BigDecimal::add).orElse(BigDecimal.ZERO),
+                basket);
+        orderService.createNewOrder(newOrder);
         basket = new ArrayList<>();
     }
 
Index: src/main/java/edu/bionic/presentation/controller/GlobalControllerAdvice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/presentation/controller/GlobalControllerAdvice.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/presentation/controller/GlobalControllerAdvice.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -1,14 +1,27 @@
 package edu.bionic.presentation.controller;
 
 import edu.bionic.domain.Order;
+import edu.bionic.util.exception.NotFoundException;
+import org.springframework.http.HttpStatus;
+import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ModelAttribute;
+import org.springframework.web.bind.annotation.ResponseStatus;
 
 @ControllerAdvice
 public class GlobalControllerAdvice {
 
-    @ModelAttribute("basket")
+    @ModelAttribute("currentOrder")
     public Order createBasket() {
         return new Order();
     }
+
+    @ExceptionHandler(NotFoundException.class)
+    @ResponseStatus(HttpStatus.NOT_FOUND)
+    public String notFoundException(Model model, Exception ex) {
+        model.addAttribute("errorMessage", ex.getMessage() );
+
+        return "notFound";
+    }
 }
Index: src/main/java/edu/bionic/presentation/controller/OrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/presentation/controller/OrderController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/presentation/controller/OrderController.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -1,17 +1,19 @@
 package edu.bionic.presentation.controller;
 
+import edu.bionic.domain.Order;
 import edu.bionic.service.OrderService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.SessionAttributes;
+import org.springframework.validation.BindingResult;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.bind.support.SessionStatus;
 
+import javax.validation.Valid;
 import java.time.format.DateTimeFormatter;
 
 @Controller
-@SessionAttributes("basket")
+@SessionAttributes("currentOrder")
 @RequestMapping("orders")
 public class OrderController {
 
@@ -29,6 +31,29 @@
         model.addAttribute("orders", orderService.getAll());
         model.addAttribute("dateTimeFormatter", dateTimeFormatter);
 
-        return "order-list";
+        return "order/order-list";
+    }
+
+    @GetMapping("newOrder")
+    public String showNewOrderPage(@ModelAttribute("currentOrder") Order basket) {
+        return "order/newOrder";
+    }
+
+    @PostMapping("newOrder")
+    public String submitNewOrder(@Valid @ModelAttribute("currentOrder") Order newOrder,
+                                 BindingResult bindingResult,
+                                 SessionStatus sessionStatus) {
+        if (bindingResult.hasErrors()) {
+            return "order/newOrder";
+        }
+        orderService.createNewOrder(newOrder);
+        sessionStatus.setComplete();
+
+        return "redirect:/orders/success";
+    }
+
+    @GetMapping("success")
+    public String successCreatedOrderPage() {
+        return "order/orderCreated";
     }
 }
Index: src/main/java/edu/bionic/presentation/controller/ProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/presentation/controller/ProductController.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/presentation/controller/ProductController.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -13,7 +13,7 @@
 
 @Controller
 @RequestMapping("products")
-@SessionAttributes("basket")
+@SessionAttributes("currentOrder")
 public class ProductController {
 
     private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("d-MM-yyyy HH:mm");
@@ -32,7 +32,7 @@
     @GetMapping
     public String showProducts(Model model) {
         model.addAttribute("products",  productService.getAll());
-        return "product-list";
+        return "product/product-list";
     }
 
     @GetMapping("{productId}")
@@ -41,12 +41,12 @@
         model.addAttribute("comments", commentService.getByProduct(productId));
         model.addAttribute("dateTimeFormatter", dateTimeFormatter);
 
-        return "product";
+        return "product/product";
     }
 
     @PostMapping("{productId}/addToBasket")
     public String addToBasket(@PathVariable("productId") Integer productId,
-                              @SessionAttribute("basket") Order currentOrder) {
+                              @SessionAttribute("currentOrder") Order currentOrder) {
 
         orderService.addProductToOrder(currentOrder, productId);
 
Index: src/main/java/edu/bionic/service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/service/OrderService.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/service/OrderService.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -9,7 +9,7 @@
 
     List<Order> getAll();
 
-    void createNewOrder(List<Product> products);
+    void createNewOrder(Order order);
 
     void addProductToOrder(Order order, Integer productId);
 }
Index: src/main/java/edu/bionic/service/impl/OrderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/service/impl/OrderServiceImpl.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/service/impl/OrderServiceImpl.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -30,10 +30,8 @@
     }
 
     @Override
-    public void createNewOrder(List<Product> products) {
-        Order order = new Order(LocalDateTime.now(),
-                products.stream().map(Product::getPrice).reduce(BigDecimal::add).orElse(BigDecimal.ZERO),
-                products);
+    public void createNewOrder(Order order) {
+        order.setDateTime(LocalDateTime.now());
         orderDao.save(order);
     }
 
Index: src/main/java/edu/bionic/service/impl/ProductServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/service/impl/ProductServiceImpl.java	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/java/edu/bionic/service/impl/ProductServiceImpl.java	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -32,6 +32,6 @@
     @Override
     public Product getById(int productId) {
         return productDao.getById(productId).
-                orElseThrow(() -> new NotFoundException(String.format("Product with id=%d was not found", productId)));
+                orElseThrow(() -> new NotFoundException(String.format("Продукт с id=%d не найден", productId)));
     }
 }
Index: src/main/webapp/WEB-INF/views/index.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/views/index.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/webapp/WEB-INF/views/index.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -2,10 +2,10 @@
 <%@ page contentType="text/html;charset=UTF-8" language="java" %>
 <html>
 <head>
-    <title>Магазин iShop</title>
+    <title>iShop | Главная</title>
 </head>
 <body>
-<h1>Welcome to iShop</h1>
+<h1>Добропожаловать в мазазин iShop</h1>
 <ul>
     <li><a href="<c:url value="/products"/>">Каталог товаров</a></li>
     <li><a href="<c:url value="/orders"/> ">Предыдущие заказы</a></li>
Index: src/main/webapp/WEB-INF/views/notFound.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/views/notFound.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ src/main/webapp/WEB-INF/views/notFound.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,10 @@
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>iShop | Несуществующая страница</title>
+</head>
+<body>
+    <h1>404 - Страница отсутствует</h1>
+    <h3>${errorMessage}</h3>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/order/newOrder.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/views/order/newOrder.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ src/main/webapp/WEB-INF/views/order/newOrder.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,62 @@
+<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>iShop | Оформление заказа</title>
+</head>
+<body>
+    <c:if test="${currentOrder.products.size() == 0}">
+        На данный момент товаров в корзине нет
+    </c:if>
+
+    <c:if test="${currentOrder.products.size() > 0}" >
+        <h1>Товары в корзине</h1>
+        <table border="1" cellpadding="5">
+            <tr>
+                <th>№</th>
+                <th>Товар</th>
+                <th>Цена</th>
+                <th></th>
+            </tr>
+            <c:forEach items="${currentOrder.products}" var="product" varStatus="loop">
+                <tr>
+                    <td>${loop.index + 1}</td>
+                    <td>${product.name} ${product.color} ${product.capacity} GB</td>
+                    <td>${product.price}</td>
+                    <td><button>x</button></td>
+                </tr>
+            </c:forEach>
+        </table>
+        <strong>Общая сумма: ${currentOrder.totalAmount} USD</strong>
+        <p>
+            <a href="<c:url value="/products"/> "><button>Вернться к покупкам</button></a>
+        </p>
+
+        <h2>Оформление заказа: </h2>
+        <form:form modelAttribute="currentOrder">
+            <p>
+                <label for="name">Имя:</label>
+                <form:input path="name"/>
+                <form:errors path="name" cssStyle="color: red"/>
+            </p>
+            <p>
+                <label for="email">Email:</label>
+                <form:input path="email"/>
+                <form:errors path="email" cssStyle="color: red"/>
+            </p>
+            <p>
+                <label for="phone">Телефон:</label>
+                <form:input path="phone" id="phone"/>
+            </p>
+            <p>
+                <label for="address">Адрес доставки:</label> <br/>
+                <form:textarea path="address" rows="10" cols="30"/> <br/>
+                <form:errors path="address" cssStyle="color: red"/>
+            </p>
+            <button type="submit">Отправить заказ</button>
+        </form:form>
+    </c:if>
+
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/order-list.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/order-list.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/webapp/WEB-INF/views/order/order-list.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -2,7 +2,7 @@
 <%@ page contentType="text/html;charset=UTF-8" language="java" %>
 <html>
 <head>
-    <title>Предыдущие заказы</title>
+    <title>iShop | Предыдущие заказы</title>
 </head>
 <body>
     <h1>Предыдущие заказы</h1>
@@ -12,12 +12,17 @@
     <c:forEach items="${orders}" var="order">
         <p>
             <strong>Дата:</strong> ${order.dateTime.format(dateTimeFormatter)} <br/>
+            <strong>Имя:</strong> ${order.name} <br/>
+            <strong>Почта:</strong> ${order.email} <br/>
+            <strong>Телефон:</strong> ${order.phone} <br/>
             <strong>Общая сумма:</strong> ${order.totalAmount} <br/>
             <strong>Товары:</strong> <br/>
             <c:forEach items="${order.products}" var="product">
-                ${product.name} <br/>
+                ${product.name} ${product.color} ${product.capacity} GB <br/>
             </c:forEach>
+            <strong>Адрес доставки:</strong> ${order.address}
         </p>
     </c:forEach>
+    <a href="<c:url value="/"/> "><button>На главную</button></a>
 </body>
 </html>
Index: src/main/webapp/WEB-INF/views/order/orderCreated.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/views/order/orderCreated.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
+++ src/main/webapp/WEB-INF/views/order/orderCreated.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -0,0 +1,14 @@
+<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>iShop | Успешный заказ</title>
+</head>
+<body>
+    <h1>Заказ успешно сохранен</h1>
+    <p>
+        Менеджеры свяжуться с вами в ближайшее время.
+    </p>
+    <a href="<c:url value="/"/>" ><button type="button">Вернуться на главную</button></a>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/product-list.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/product-list.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/webapp/WEB-INF/views/product/product-list.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -2,7 +2,7 @@
 <%@ page contentType="text/html;charset=UTF-8" language="java" %>
 <html>
 <head>
-    <title>Каталог товаров</title>
+    <title>iShop | Каталог товаров</title>
 </head>
 <body>
     <h1>Каталог товаров iShop</h1>
@@ -21,5 +21,6 @@
             <li><a href="<c:url value="products/${product.id}"/>">${product.printInfo()}</a></li>
         </c:forEach>
     </ul>
+    <a href="<c:url value="/"/> "><button>На главную</button></a>
 </body>
 </html>
Index: src/main/webapp/WEB-INF/views/product.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/product.jsp	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ src/main/webapp/WEB-INF/views/product/product.jsp	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -2,14 +2,9 @@
 <%@ page contentType="text/html;charset=UTF-8" language="java" %>
 <html>
 <head>
-    <title>iShop - ${product.name}</title>
+    <title>iShop | ${product.name}</title>
 </head>
 <body>
-    <c:if test="${basket.products.size() > 0}">
-        <p><strong><i>Количество товаров в корзине: ${basket.products.size()}.
-            Общая сумма ${basket.totalAmount}</i></strong> </p>
-        <hr/>
-    </c:if>
     <h2>${product.name}</h2>
     <h3>Цена: ${product.price} USD</h3>
     <div>
@@ -25,6 +20,12 @@
         </form>
     </div>
     <hr/>
+    <c:if test="${currentOrder.products.size() > 0}">
+        <p><strong><i>Количество товаров в корзине: ${currentOrder.products.size()}.
+            Общая сумма ${currentOrder.totalAmount}</i></strong> </p>
+        <a href="<c:url value="/orders/newOrder"/> "><button>Перейти к оформлению заказа</button></a>
+        <hr/>
+    </c:if>
     <div>
         <h4>Отзывы:</h4>
         <c:forEach items="${comments}" var="comment">
Index: useful-resourses.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- useful-resourses.md	(revision b6b71057f7273863333e5ebcc0005c2f957d9a14)
+++ useful-resourses.md	(revision 1532631640e32c2606e4eec203549c9864c0acf8)
@@ -1,6 +1,6 @@
 ## Java Pre Production Course
 
-### Lecture 1
+### Topic 1
 1. VCS, Git
    * [Wiki: Система Управления Вериями.](https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8)
     [DVCS](https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8#.D0.A0.D0.B0.D1.81.D0.BF.D1.80.D0.B5.D0.B4.D0.B5.D0.BB.D1.91.D0.BD.D0.BD.D1.8B.D0.B5_.D1.81.D0.B8.D1.81.D1.82.D0.B5.D0.BC.D1.8B_.D1.83.D0.BF.D1.80.D0.B0.D0.B2.D0.BB.D0.B5.D0.BD.D0.B8.D1.8F_.D0.B2.D0.B5.D1.80.D1.81.D0.B8.D1.8F.D0.BC.D0.B8)
@@ -9,14 +9,40 @@
    * [Интеративный обучающий курс 2 (англ.)](https://try.github.io/levels/1/challenges/1)
 2. Maven
    * [Руководство по Maven](http://www.apache-maven.ru/index.html)
-   * [Жизненный цикл сборки проекта (англ.)](http://www.apache-maven.ru/index.html)
+   * [Жизненный цикл сборки проекта (англ.)](https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html)
    * [Управление зависимостями (англ.)](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)
    * [Maven Complete Guide (англ.)](http://books.sonatype.com/mvnref-book/reference/index.html)
-### Lecture 2
+### Topic 2
    * [Wiki: Слои приложения (англ.)](https://en.wikipedia.org/wiki/Multitier_architecture)
    * [Wiki: Spring Framework](https://ru.wikipedia.org/wiki/Spring_Framework)
    * [Этапы инициализации Spring Context](https://habrahabr.ru/post/222579/)
    * [Документация Spring IoC Framework (англ.)(7-7.6.1; 7.9-7.13)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html)
    * [Book: Spring In Action 4 (рус.\англ.)(Разделы 2-3)](https://www.manning.com/books/spring-in-action-fourth-edition)
-   * [Полная документация всех модулей Spring (англ.\обзорно)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html)
-   * [Google Guava Wiki (англ.\обзорно)](https://github.com/google/guava/wiki)
\ No newline at end of file
+   * [Полная документация всех модулей Spring (англ.\обзорно)](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)
+   * [Google Guava Wiki (англ.\обзорно)](https://github.com/google/guava/wiki)
+### Topic 3 - HTTP, Tomcat, ServletApi
+   * [Простым языком об HTTP](https://habrahabr.ru/post/215117/)
+   * [Создание простейшего сервлета и jsp-файла](http://devcolibri.com/4284)
+   * [Официальный сайт Tomcat. Загрузки. Документация (англ.\обзорно)](http://tomcat.apache.org/)
+### Topic 4 - HTML, JSP
+   * [Введение в HTML](https://developer.mozilla.org/ru/docs/Web/Guide/HTML/Introduction)
+   * [Основные тэги в HTML](http://zarabotat-na-sajte.ru/uroki-html/osnovnie-tegi-html.html)
+   * [Как создають форму в HTML](http://zarabotat-na-sajte.ru/uroki-html/teg-form.html)
+   * [Создание простой JSP страницы](http://java-course.ru/student/book1/jsp/)
+   * [JSP Tutorial (англ.)](https://www.tutorialspoint.com/jsp/index.htm)
+   * [JSP Expression Language (англ.)](https://www.tutorialspoint.com/jsp/jsp_expression_language.htm)
+   * [Быстрый старт с JSTL](http://devcolibri.com/1250)
+   * [Подробное описание возможностей Core JSTL](http://java-online.ru/jsp-jstl.xhtml)
+   * [Описание библиотек JSTL (англ.)](https://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm)
+### Topic 5 - Spring MVC 1
+   * [Основы Spring MVC](http://javastudy.ru/spring-mvc/spring-mvc-basic/)
+   * [Подключение ViewResolver в Spring MVC](http://javastudy.ru/spring-mvc/spring-mvc-viewresolver/)
+   * [Использование ModelAttribute в Spring MVC](http://www.seostella.com/ru/article/2012/04/24/modelattribute-i-spring-mvc.html)
+   * [Документация Spring MVC (англ.)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html)
+### Topic 6 - Spring MVC 2
+   * [Spring MVC. Работа с SessionAttributes (англ.)](https://www.intertech.com/Blog/understanding-spring-mvc-model-and-session-attributes/)
+   * [Spring MVC & JSP (англ.)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html#view-jsp)
+   * [Spring MVC Validation (англ.)](http://codetutr.com/2013/05/28/spring-mvc-form-validation/)
+   * [Spring MVC Exception Handling (англ.)](https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc)
+   
+   
\ No newline at end of file
