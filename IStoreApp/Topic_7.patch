Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 56a027deba05326c61e5034e2ea6d74f85e2b0e8)
+++ pom.xml	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -27,6 +27,10 @@
         <!-- Validation -->
         <validation.api.version>1.1.0.Final</validation.api.version>
         <hibernate.validation.version>5.4.1.Final</hibernate.validation.version>
+
+        <!-- Database -->
+        <hsqldb.version>2.4.0</hsqldb.version>
+        <postgres.version>42.1.3</postgres.version>
     </properties>
 
     <build>
@@ -115,6 +119,26 @@
             <artifactId>hibernate-validator</artifactId>
             <version>${hibernate.validation.version}</version>
         </dependency>
+
+        <!-- Database -->
+        <!-- HSQL JDBC Driver -->
+        <dependency>
+            <groupId>org.hsqldb</groupId>
+            <artifactId>hsqldb</artifactId>
+            <version>${hsqldb.version}</version>
+        </dependency>
+        <!-- PostgreSQL JDBC Driver -->
+        <dependency>
+            <groupId>org.postgresql</groupId>
+            <artifactId>postgresql</artifactId>
+            <version>${postgres.version}</version>
+        </dependency>
+        <!-- Spring JDBC -->
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-jdbc</artifactId>
+            <version>${spring.version}</version>
+        </dependency>
     </dependencies>
 
 
Index: src/main/java/edu/bionic/dao/jdbc/JdbcProductDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/dao/jdbc/JdbcProductDao.java	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/java/edu/bionic/dao/jdbc/JdbcProductDao.java	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,54 @@
+package edu.bionic.dao.jdbc;
+
+import edu.bionic.dao.ProductDao;
+import edu.bionic.domain.Color;
+import edu.bionic.domain.Product;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Primary;
+import org.springframework.dao.support.DataAccessUtils;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+import java.util.Optional;
+
+@Repository
+@Primary
+public class JdbcProductDao implements ProductDao {
+
+    private RowMapper<Product> ROW_MAPPER;
+
+    private JdbcTemplate jdbcTemplate;
+
+    @Autowired
+    public JdbcProductDao(JdbcTemplate jdbcTemplate) {
+        this.jdbcTemplate = jdbcTemplate;
+
+        ROW_MAPPER = (rs, rowNum) -> {
+            Product product = new Product();
+            product.setId(rs.getInt("id"));
+            product.setName(rs.getString("name"));
+            product.setPrice(rs.getBigDecimal("price"));
+            product.setColor(Color.values()[rs.getInt("color")]);
+            product.setCapacity(rs.getInt("capacity"));
+            product.setDisplay(rs.getString("display"));
+            product.setDisplay(rs.getString("description"));
+            return product;
+        };
+    }
+
+
+    @Override
+    public List<Product> getAll() {
+        String sql = "SELECT * FROM products";
+        return jdbcTemplate.query(sql, ROW_MAPPER);
+    }
+
+    @Override
+    public Optional<Product> getById(int productId) {
+        String sql = "SELECT * FROM products WHERE id = ?";
+        List<Product> product = jdbcTemplate.query(sql, new Object[]{productId}, ROW_MAPPER);
+        return Optional.ofNullable(DataAccessUtils.singleResult(product));
+    }
+}
Index: src/main/java/edu/bionic/domain/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/edu/bionic/domain/Product.java	(revision a0903f33c39f84c43cb6c37b1184b4e1341121b3)
+++ src/main/java/edu/bionic/domain/Product.java	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -10,6 +10,9 @@
     private Color color;
     private Integer capacity;
     private String display;
+    private String description;
+
+    public Product() { }
 
     public Product(Integer id, String name, BigDecimal price, Color color, Integer capacity, String display) {
         this.id = id;
@@ -71,4 +74,12 @@
     public String printInfo() {
         return String.format("%d. %s %s %d - %.2f", id, name, color, capacity, price);
     }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
 }
Index: src/main/resources/db/fillDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/fillDB.sql	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/resources/db/fillDB.sql	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,16 @@
+DELETE FROM products;
+
+ALTER SEQUENCE products_id_seq RESTART WITH 1;
+
+INSERT INTO products (name, price, color, capacity, display, description)
+VALUES ('iPhone 7', 700, 0, 64, '4,7 inch', NULL);
+INSERT INTO products (name, price, color, capacity, display, description)
+VALUES ('iPhone 7', 700, 1, 128, '4,7 inch', NULL);
+INSERT INTO products (name, price, color, capacity, display, description)
+VALUES ('iPhone 7', 700, 2, 256, '4,7 inch', NULL);
+INSERT INTO products (name, price, color, capacity, display, description)
+VALUES ('iPhone 7 Plus', 800, 0, 256, '5,5 inch', NULL);
+INSERT INTO products (name, price, color, capacity, display, description)
+VALUES ('iPhone 7 Plus', 800, 2, 64, '5,5 inch', NULL);
+INSERT INTO products (name, price, color, capacity, display, description)
+VALUES ('iPhone 7 Plus', 800, 1, 128, '5,5 inch', NULL);
\ No newline at end of file
Index: src/main/resources/db/hsqldb.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/hsqldb.properties	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/resources/db/hsqldb.properties	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,9 @@
+#database.url=jdbc:hsqldb:file:D:/Java/HSQLDB/ishop
+database.url=jdbc:hsqldb:mem:ishop
+
+database.username=sa
+database.password=
+
+jdbc.database.init=true
+jdbc.initLocation=initDB_hsql.sql
+
Index: src/main/resources/db/initDB_hsql.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/initDB_hsql.sql	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/resources/db/initDB_hsql.sql	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,33 @@
+DROP TABLE IF EXISTS orders_products;
+DROP TABLE IF EXISTS orders;
+DROP SEQUENCE IF EXISTS orders_id_seq;
+DROP TABLE IF EXISTS products;
+DROP SEQUENCE IF EXISTS products_id_seq;
+
+CREATE SEQUENCE products_id_seq AS INTEGER START WITH 1;
+CREATE TABLE products (
+  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE products_id_seq PRIMARY KEY,
+  name        LONGVARCHAR NOT NULL,
+  price       NUMERIC(10,2),
+  color       INTEGER,
+  capacity    INTEGER,
+  display     LONGVARCHAR,
+  description LONGVARCHAR
+);
+
+CREATE SEQUENCE orders_id_seq AS INTEGER START WITH 1;
+CREATE TABLE orders (
+  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE products_id_seq PRIMARY KEY,
+  total_amount  NUMERIC(10,2) NOT NULL,
+  name          LONGVARCHAR NOT NULL,
+  email         LONGVARCHAR NOT NULL,
+  phone         LONGVARCHAR,
+  address       LONGVARCHAR NOT NULL
+);
+
+CREATE TABLE orders_products (
+  order_id    INTEGER NOT NULL,
+  product_id  INTEGER NOT NULL,
+  FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
+  FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
+);
\ No newline at end of file
Index: src/main/resources/db/initDB_postgres.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/initDB_postgres.sql	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/resources/db/initDB_postgres.sql	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,29 @@
+DROP TABLE IF EXISTS orders_products;
+DROP TABLE IF EXISTS orders;
+DROP TABLE IF EXISTS products;
+
+CREATE TABLE products (
+  id          SERIAL PRIMARY KEY,
+  name        TEXT NOT NULL,
+  price       NUMERIC(10,2),
+  color       INTEGER,
+  capacity    INTEGER,
+  display     TEXT,
+  description TEXT
+);
+
+CREATE TABLE orders (
+  id            SERIAL PRIMARY KEY,
+  total_amount  NUMERIC(10,2) NOT NULL,
+  name          TEXT NOT NULL,
+  email         TEXT NOT NULL,
+  phone         TEXT,
+  address       TEXT NOT NULL
+);
+
+CREATE TABLE orders_products (
+  order_id    INTEGER NOT NULL,
+  product_id  INTEGER NOT NULL,
+  FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
+  FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
+);
\ No newline at end of file
Index: src/main/resources/db/postgres.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/postgres.properties	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/resources/db/postgres.properties	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,8 @@
+database.url=jdbc:postgresql://localhost:5432/ishop
+
+database.username=ishop_dev
+database.password=ishop_dev
+
+jdbc.database.init=true
+jdbc.initLocation=initDB_postgres.sql
+
Index: src/main/resources/spring/spring-app.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-app.xml	(revision a0903f33c39f84c43cb6c37b1184b4e1341121b3)
+++ src/main/resources/spring/spring-app.xml	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -5,6 +5,8 @@
        xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
+    <import resource="spring-db.xml"/>
+
     <bean id="orderDaoMock" class="edu.bionic.dao.mock.OrderDaoMock" init-method="initOrderStorage"/>
     <bean id="productDaoMock" class="edu.bionic.dao.mock.ProductDaoMock" init-method="initProductStorage"/>
     <bean id="commentDaoMock" class="edu.bionic.dao.mock.CommentDaoMock" init-method="initCommentStorage"/>
Index: src/main/resources/spring/spring-db.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-db.xml	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
+++ src/main/resources/spring/spring-db.xml	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:context="http://www.springframework.org/schema/context"
+       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
+
+    <context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>
+
+    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
+        <property name="driverClass" value="org.hsqldb.jdbcDriver"/>
+        <property name="url" value="${database.url}"/>
+        <property name="username" value="${database.username}"/>
+        <property name="password" value="${database.password}"/>
+    </bean>
+
+    <jdbc:initialize-database data-source="dataSource" enabled="${jdbc.database.init}">
+        <jdbc:script location="classpath:db/${jdbc.initLocation}"/>
+        <jdbc:script encoding="utf-8" location="classpath:db/fillDB.sql"/>
+    </jdbc:initialize-database>
+
+    <context:component-scan base-package="edu.bionic.dao.jdbc"/>
+
+    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
+        <constructor-arg ref="dataSource"/>
+    </bean>
+
+</beans>
\ No newline at end of file
Index: useful-resourses.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- useful-resourses.md	(revision a0903f33c39f84c43cb6c37b1184b4e1341121b3)
+++ useful-resourses.md	(revision 7b1a8c73324da1921ba47331630bfc383678a296)
@@ -44,5 +44,12 @@
    * [Spring MVC & JSP (англ.)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html#view-jsp)
    * [Spring MVC Validation (англ.)](http://codetutr.com/2013/05/28/spring-mvc-form-validation/)
    * [Spring MVC Exception Handling (англ.)](https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc)
-   
+   * [How to redirect BindingErrors after POST](https://stackoverflow.com/questions/2543797/spring-redirect-after-post-even-with-validation-errors)
+### Topic 7 - SQL, Spring JDBC
+   * [Практические задачи по SQL](http://www.sql-ex.ru/)
+   * [PostgreSQL syntax (англ.\обзорно)](https://www.postgresql.org/docs/current/static/sql-commands.html)
+   * [PostgreSQL datatypes (англ.\обзорно)](https://www.postgresql.org/docs/9.6/static/datatype.html)
+   * [HSQLDB datatypes & syntax (англ.\обзорно)](http://hsqldb.org/doc/guide/sqlgeneral-chapt.html#sgc_data_type_guide)
+   * [Простой Dao класс с Spring JDBC](https://javatalks.ru/topics/25965)
+   * [Документация по Spring JDBC (англ.\обзорно)](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/jdbc.html)
    
\ No newline at end of file
